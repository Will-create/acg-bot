{"version":3,"file":"chartisan.asd.modern.js","sources":["../src/data.ts","../src/hooks.ts","../src/helpers.ts","../src/error/index.ts","../src/error/general.ts","../src/loader/index.ts","../src/loader/bar.ts","../src/chartisan.ts"],"sourcesContent":["/**\n * Determines how the extra data looks like.\n */\nexport interface ExtraData {\n  [key: string]: unknown\n}\n\n/**\n * Represents the chart data.\n */\nexport interface ChartData {\n  /**\n   * Stores the chart labels.\n   */\n  labels: string[]\n\n  /**\n   * Stores the chart extra options.\n   */\n  extra?: ExtraData\n}\n\n/**\n * Determines if the given object satisfies ChartData.\n */\nexport function isChartData(obj: any): obj is ChartData {\n  return 'labels' in obj\n}\n\n/**\n * Determine the dataset data.\n */\nexport interface DatasetData {\n  /**\n   * Stores the dataset name.\n   */\n  name: string\n\n  /**\n   * Stores the dataset values.\n   */\n  values: number[]\n\n  /**\n   * Stores the dataset extra options.\n   */\n  extra?: ExtraData\n}\n\n/**\n * Determines if obj satisfies ChartData.\n */\nexport function isDatasetData(obj: any): obj is DatasetData {\n  return 'name' in obj && 'values' in obj\n}\n\n/**\n * Represents the server data.\n */\nexport interface ServerData {\n  /**\n   * Stores the chart data.\n   */\n  chart: ChartData\n\n  /**\n   * Stores the datasets.\n   */\n  datasets: DatasetData[]\n}\n\n/**\n * Determine if the given  object satisfies ServerData.\n */\nexport function isServerData(obj: any): obj is ServerData {\n  return (\n    'chart' in obj && 'datasets' in obj && isChartData(obj.chart) && obj.datasets.every((d: any) => isDatasetData(d))\n  )\n}\n","import { mergeOptions } from './helpers'\nimport { ServerData } from './data'\n\n/**\n * Determines the parameters that the hooks can take.\n */\nexport interface HookParams<D> {\n  /**\n   * Determines the data of the hook.\n   */\n  data: D\n\n  /**\n   * Passes a merge option.\n   */\n  merge: typeof mergeOptions\n\n  /**\n   * Determines the server data in case\n   * extra information is needed.\n   */\n  server: ServerData\n}\n\n/**\n * Determines a hook type.\n */\nexport type Hook<D> = (params: HookParams<D>) => D\n\n/**\n * Determines the interface of a hook\n * constructor.\n */\nexport interface isHook<D> {\n  new (): Hooks<D>\n}\n\n/**\n * Represents the hooks of the chart.\n */\nexport class Hooks<D> {\n  /**\n   * Stores the hooks.\n   */\n  hooks: Hook<D>[] = []\n\n  /**\n   * Appends a custom hook\n   */\n  custom(hook: Hook<D>): this {\n    this.hooks.push(hook)\n    return this\n  }\n\n  /**\n   * Merges the given options to the chart.\n   */\n  options(options: D): this {\n    return this.custom(({ data, merge }) => merge(data, options))\n  }\n\n  /**\n   * Merges the given hooks with the current ones.\n   */\n  merge(other: Hooks<D>): this {\n    this.hooks = [...this.hooks, ...other.hooks]\n    return this\n  }\n}\n","import merge from 'deepmerge'\n\n/**\n * Stores the default color palette.\n */\nexport const colorPalette = [\n  '#667EEA',\n  '#F56565',\n  '#48BB78',\n  '#ED8936',\n  '#9F7AEA',\n  '#38B2AC',\n  '#ECC94B',\n  '#4299E1',\n  '#ED64A6',\n]\n\n/**\n * Used to merge different nested options.\n */\nexport const mergeOptions = merge\n","import general from './general'\n\n/**\n * Represents the error types available.\n */\nexport type ErrorType = 'general'\n\n/**\n * Determine the error options.\n */\nexport interface ErrorOptions {\n  color: string\n  text: string\n  size: [number, number]\n  textColor: string\n  type: ErrorType\n  debug: boolean\n}\n\n/**\n * HTML Errors available.\n */\nconst errors = {\n  general,\n}\n\nexport const error = (options: ErrorOptions, error: Error) => `\n    <div class=\"chartisan-help-block\">\n    <div class=\"chartisan-refresh-chart\">\n        ${errors[options.type](options)}\n    </div>\n    ${\n      options.text != ''\n        ? `\n            <div class=\"chartisan-help-text\" style=\"color: ${options.textColor};\">\n                ${options.text}\n            </div>\n            `\n        : ''\n    }\n    ${\n      options.debug\n        ? `\n            <div class=\"chartisan-help-text-error\">\n                ${error.message}\n            </div>`\n        : ''\n    }\n    </div>\n`\n","import { ErrorOptions } from './index'\n\nexport default ({ size, color }: ErrorOptions) => `\n    <svg\n        role=\"img\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"${size[0]}\"\n        height=\"${size[1]}\"\n        viewBox=\"0 0 24 24\"\n        aria-labelledby=\"refreshIconTitle\"\n        stroke=\"${color}\"\n        stroke-width=\"1\"\n        stroke-linecap=\"square\"\n        stroke-linejoin=\"miter\"\n        fill=\"none\"\n        color=\"${color}\"\n    >\n        <title id=\"refreshIconTitle\">Refresh</title>\n        <polyline points=\"22 12 19 15 16 12\"/>\n        <path d=\"M11,20 C6.581722,20 3,16.418278 3,12 C3,7.581722 6.581722,4 11,4 C15.418278,4 19,7.581722 19,12 L19,14\"/>\n    </svg>\n`\n","import bar from './bar'\n\n/**\n * Determines the available loader types.\n */\nexport type LoaderType = 'bar'\n\n/**\n * Determines the options of the loader.\n */\nexport interface LoaderOptions {\n  /**\n   * Determines the color of the loader.\n   */\n  color: string\n\n  /**\n   * Determines the size of the loader.\n   */\n  size: [number, number]\n\n  /**\n   * Determine the loader type.\n   */\n  type: LoaderType\n\n  /**\n   * Determines the text color of the loader.\n   */\n  textColor: string\n\n  /**\n   * Determine the text to show.\n   */\n  text: string\n}\n\n/**\n * Determines the available loaders.\n */\nconst loaders = {\n  bar,\n}\n\n/**\n * Creates the loader given the options.\n */\nexport const loader = (options: LoaderOptions) => `\n    <div class=\"chartisan-help-block\">\n        ${loaders[options.type](options)}\n        ${\n          options.text != ''\n            ? `\n                <div class=\"chartisan-help-text\" style=\"color: ${options.textColor};\">\n                    ${options.text}\n                </div>`\n            : ''\n        }\n    </div>\n`\n","import { LoaderOptions } from './index'\n\n/**\n * The bar loader.\n */\nexport default ({ size, color }: LoaderOptions) => `\n    <svg width=\"${size[0]}\" height=\"${size[1]}\" viewBox=\"0 0 135 140\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">\n        <rect y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n            <animate attributeName=\"height\"\n                begin=\"0.5s\" dur=\"1s\"\n                values=\"120;110;100;90;80;70;60;50;40;140;120\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n            <animate attributeName=\"y\"\n                begin=\"0.5s\" dur=\"1s\"\n                values=\"10;15;20;25;30;35;40;45;50;0;10\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n        </rect>\n        <rect x=\"30\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n            <animate attributeName=\"height\"\n                begin=\"0.25s\" dur=\"1s\"\n                values=\"120;110;100;90;80;70;60;50;40;140;120\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n            <animate attributeName=\"y\"\n                begin=\"0.25s\" dur=\"1s\"\n                values=\"10;15;20;25;30;35;40;45;50;0;10\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n        </rect>\n        <rect x=\"60\" width=\"15\" height=\"140\" rx=\"6\">\n            <animate attributeName=\"height\"\n                begin=\"0s\" dur=\"1s\"\n                values=\"120;110;100;90;80;70;60;50;40;140;120\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n            <animate attributeName=\"y\"\n                begin=\"0s\" dur=\"1s\"\n                values=\"10;15;20;25;30;35;40;45;50;0;10\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n        </rect>\n        <rect x=\"90\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n            <animate attributeName=\"height\"\n                begin=\"0.25s\" dur=\"1s\"\n                values=\"120;110;100;90;80;70;60;50;40;140;120\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n            <animate attributeName=\"y\"\n                begin=\"0.25s\" dur=\"1s\"\n                values=\"10;15;20;25;30;35;40;45;50;0;10\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n        </rect>\n        <rect x=\"120\" y=\"10\" width=\"15\" height=\"120\" rx=\"6\">\n            <animate attributeName=\"height\"\n                begin=\"0.5s\" dur=\"1s\"\n                values=\"120;110;100;90;80;70;60;50;40;140;120\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n            <animate attributeName=\"y\"\n                begin=\"0.5s\" dur=\"1s\"\n                values=\"10;15;20;25;30;35;40;45;50;0;10\" calcMode=\"linear\"\n                repeatCount=\"indefinite\" />\n        </rect>\n    </svg>\n`\n","import { Hooks } from './hooks'\nimport { mergeOptions as merge } from './helpers'\nimport { isServerData, ServerData } from './data'\nimport { error, ErrorOptions } from './error/index'\nimport { loader, LoaderOptions } from './loader/index'\n\n/**\n * Represents the states of the chart.\n */\nexport enum ChartState {\n  Initializing = 'initializing',\n  Loading = 'loading',\n  Error = 'error',\n  Show = 'show',\n  Destroyed = 'destroyed',\n}\n\n/**\n * Represents the chartisan options.\n */\nexport interface ChartisanOptions<D> extends Omit<UpdateOptions, 'background' | 'additional'> {\n  /**\n   * Determines the DOM element element to\n   * attach the chart to.\n   */\n  el?: string | Element | null\n\n  /**\n   * Determines the options of the loader.\n   */\n  loader?: LoaderOptions\n\n  /**\n   * Determine the error options.\n   */\n  error?: ErrorOptions\n\n  /**\n   * Hooks that run before the render happens and that are\n   * used to transform the data after the library has done\n   * it's job.\n   */\n  hooks?: Hooks<D>\n}\n\n/**\n * Interface that denotes a class value.\n */\nexport interface isChartisan<D> {\n  new (options: ChartisanOptions<D>): Chartisan<D>\n}\n\n/**\n * Options to update the chart.\n */\nexport interface UpdateOptions<U = {}> {\n  /**\n   * Determines the request url.\n   * Replaces the old one.\n   */\n  url?: string\n\n  /**\n   * Determines the options of the request.\n   * Replaces the old one.\n   */\n  options?: RequestInit\n\n  /**\n   * Determines the data of the chart.\n   * If set, no request will be performed as it\n   * will be static data. If a function is provided,\n   * the chart will display a loading message while\n   * it resolves the data.\n   */\n  data?: ServerData | (() => ServerData)\n\n  /**\n   * Loads the data in the chart in the background,\n   * without any visual feedback to the user, this is\n   * used to perform updates without displaying the\n   * \"Loading chart\" text and therefore, without re-creating\n   * the chart.\n   */\n  background?: boolean\n\n  /**\n   * Store the additional options for the update function.\n   */\n  additional?: U\n}\n\n/**\n * Modal options.\n */\ninterface ModalOptions {\n  /**\n   * Determines if the modal should be shown or not.\n   */\n  show?: boolean\n\n  /**\n   * Determines the color of the modal background.\n   */\n  color?: string\n\n  /**\n   * Determines the contents to put in the loader.\n   * It's mostly used to load some HTMl in the loader's\n   * container.\n   */\n  content?: string\n}\n\n/**\n * Chartisan class\n */\nexport abstract class Chartisan<D> {\n  /**\n   * Stores the chartisan options. The options\n   * assigned here are the defaults and can be\n   * overwritten given the constructor options.\n   */\n  protected options: ChartisanOptions<D> = {\n    el: '.chartisan',\n    url: undefined,\n    options: undefined,\n    data: undefined,\n    loader: {\n      type: 'bar',\n      size: [35, 35],\n      color: '#000',\n      text: 'Loading chart',\n      textColor: '#a0aec0',\n    },\n    error: {\n      type: 'general',\n      size: [50, 50],\n      color: '#f56565',\n      text: 'There was an error',\n      textColor: '#a0aec0',\n      debug: true,\n    },\n    hooks: undefined,\n  }\n\n  /**\n   * Represents the DOM element to attach the chart to.\n   */\n  protected element: Element\n\n  /**\n   * Stores the HTML element that takes the control\n   * of the chart. It's always a child of element\n   */\n  protected controller: HTMLDivElement\n\n  /**\n   * State of the chart.\n   */\n  protected cstate: ChartState = ChartState.Initializing\n\n  /**\n   * Represents the body where the chart is located.\n   */\n  protected body: HTMLDivElement\n\n  /**\n   * Represents the modal to show when loading\n   * or showing a chart error.\n   */\n  protected modal: HTMLDivElement\n\n  /**\n   * Creates an instance of Chartisan.\n   */\n  constructor(options?: ChartisanOptions<D>) {\n    const { el } = (this.options = { ...this.options, ...options })\n    if (typeof el! === 'string') {\n      const element = document.querySelector(el!)\n      if (!element)\n        throw Error(\n          `[Chartisan] Unable to find an element to bind the chart to a DOM element with the selector: '${el}'`\n        )\n      this.element = element\n    } else {\n      this.element = el!\n    }\n\n    // Check to see if there's already a chart controller in the element.\n    if (this.element.querySelector('.chartisan-controller')) {\n      // There seems to be a chart already created there. We don't create a new chart since\n      // we have no access to the chart instance that might be stored there. Overwriting the\n      // existing chart will lead to a memory leak and a possible malfunction of the other instance.\n      // The best we can do is to throw an error to indicate what's going on.\n      throw Error(`[Chartisan] There seems to be a chart already at the element selected by: '${el}'`)\n    }\n\n    this.controller = document.createElement('div')\n    this.body = document.createElement('div')\n    this.modal = document.createElement('div')\n    this.bootstrap()\n  }\n\n  /**\n   * Set he modal settings.\n   */\n  private setModal({ show = true, color = '#FFFFFF', content }: ModalOptions) {\n    this.modal.style.backgroundColor = color\n    this.modal.style.display = show ? 'flex' : 'none'\n    if (content) this.modal.innerHTML = content\n  }\n\n  /**\n   * Changes the status of the chart.\n   */\n  protected changeTo(state: ChartState, err?: Error) {\n    switch (state) {\n      case (ChartState.Initializing, ChartState.Loading): {\n        // this.body.innerHTML = loader(this.options.loader!)\n        this.setModal({\n          show: true,\n          content: loader(this.options.loader!),\n        })\n        break\n      }\n      case ChartState.Show: {\n        // this.body.innerHTML = ''\n        this.setModal({ show: false })\n        break\n      }\n      case ChartState.Error: {\n        this.setModal({\n          show: true,\n          content: error(this.options.error!, err ?? new Error('Unknown Error')),\n        })\n        this.refreshEvent()\n        break\n      }\n    }\n    this.cstate = state\n  }\n\n  /**\n   * Bootstraps the chart.\n   */\n  protected bootstrap() {\n    // Append the controller and the modal\n    // to the element.\n    this.element.appendChild(this.controller)\n    this.controller.appendChild(this.body)\n    this.controller.appendChild(this.modal)\n    // Append the classes to them.\n    this.controller.classList.add('chartisan-controller')\n    this.body.classList.add('chartisan-body')\n    this.modal.classList.add('chartisan-modal')\n    this.update(this.options)\n  }\n\n  /**\n   * Requests the data to the server.\n   */\n  protected request<U>(options?: UpdateOptions<U>) {\n    if (!this.options.url) return this.onError(new Error('No URL provided to fetch the data.'))\n    fetch(this.options.url!, this.options.options)\n      .then((res) => res.json())\n      .then((res) => this.onRawUpdate(res, options))\n      .catch((err) => this.onError(err))\n  }\n\n  /**\n   * Attaches the refresh event handler to the icon.\n   */\n  protected refreshEvent() {\n    const refresh = this.controller.getElementsByClassName('chartisan-refresh-chart')[0]\n    refresh.addEventListener('click', () => this.update(), { once: true })\n  }\n\n  /**\n   * Refresh the chart with new information.\n   */\n  update<U>(options?: UpdateOptions<U>) {\n    // Replace the configuration options.\n    if (options?.url) this.options.url = options.url\n    if (options?.options) this.options.options = options.options\n    // Check to see if it's static data.\n    if (options?.data) {\n      // There's no need to request\n      // new data from the server.\n      let serverData: ServerData\n      if (!isServerData(options.data)) {\n        if (!options?.background) this.changeTo(ChartState.Loading)\n        serverData = options.data()\n      } else {\n        serverData = options.data\n      }\n      const data = this.getDataFrom(serverData)\n      this.changeTo(ChartState.Show)\n      return options.background\n        ? this.onBackgroundUpdate(data, options?.additional)\n        : this.onUpdate(data, options?.additional)\n    }\n    if (!options?.background) this.changeTo(ChartState.Loading)\n    this.request(options)\n  }\n\n  /**\n   * Destroys the chart instance and removes\n   * the controller node from the DOM.\n   */\n  destroy() {\n    // Call the onDestroy method.\n    this.onDestroy()\n    // Remove the controller from the DOM.\n    this.controller.remove()\n    // Update the chart status.\n    this.changeTo(ChartState.Destroyed)\n  }\n\n  /**\n   * Gets the data from a given request, applying\n   * the hooks of the chart.\n   */\n  protected getDataFrom(server: ServerData): D {\n    let data = this.formatData(server)\n    if (this.options.hooks) {\n      for (const hook of this.options.hooks.hooks) {\n        data = hook({ data, merge, server })\n      }\n    }\n    return data\n  }\n\n  /**\n   * Called when the data is correctly recieved from\n   * the server. This method calls onUpdate() internally.\n   */\n  protected onRawUpdate<U>(response: JSON, options?: UpdateOptions<U>) {\n    if (!isServerData(response)) return this.onError(new Error('Invalid server data'))\n    const data = this.getDataFrom(response)\n    this.changeTo(ChartState.Show)\n    options?.background ? this.onBackgroundUpdate(data, options?.additional) : this.onUpdate(data, options?.additional)\n  }\n\n  /**\n   * Formats the data of the request to match the data that\n   * the chart needs (acording to the desired front-end).\n   */\n  protected abstract formatData(response: ServerData): D\n\n  /**\n   * Handles a successfull response of the chart data.\n   */\n  protected abstract onUpdate<U>(data: D, options?: U): void\n\n  /**\n   * Called when the chart has to be updated from\n   * the background, without creating a new chart instance.\n   */\n  protected abstract onBackgroundUpdate<U>(data: D, options?: U): void\n\n  /**\n   * Handles a successful destroy call.\n   */\n  protected abstract onDestroy(): void\n\n  /**\n   * Handles an error when getting the data of the chart.\n   */\n  protected onError(err: Error) {\n    this.changeTo(ChartState.Error, err)\n  }\n\n  /**\n   * Returns the current chart state.\n   */\n  state(): ChartState {\n    return this.cstate\n  }\n}\n"],"names":["isChartData","obj","isDatasetData","isServerData","chart","datasets","every","d","Hooks","constructor","this","custom","hook","hooks","push","options","data","merge","other","colorPalette","mergeOptions","errors","general","size","color","error","type","text","textColor","debug","message","loaders","bar","loader","ChartState","Chartisan","el","url","undefined","Initializing","element","document","querySelector","Error","controller","createElement","body","modal","bootstrap","setModal","show","content","style","backgroundColor","display","innerHTML","changeTo","state","err","Show","refreshEvent","cstate","appendChild","classList","add","update","request","onError","fetch","then","res","json","onRawUpdate","catch","getElementsByClassName","addEventListener","once","serverData","background","Loading","getDataFrom","onBackgroundUpdate","additional","onUpdate","destroy","onDestroy","remove","Destroyed","server","formatData","response"],"mappings":"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"}