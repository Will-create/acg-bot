import t from"deepmerge";export{default as mergeOptions}from"deepmerge";function e(t){return"labels"in t}function n(t){return"name"in t&&"values"in t}function i(t){return"chart"in t&&"datasets"in t&&e(t.chart)&&t.datasets.every(t=>n(t))}class r{constructor(){this.hooks=[]}custom(t){return this.hooks.push(t),this}options(t){return this.custom(({data:e,merge:n})=>n(e,t))}merge(t){return this.hooks=[...this.hooks,...t.hooks],this}}const o=["#667EEA","#F56565","#48BB78","#ED8936","#9F7AEA","#38B2AC","#ECC94B","#4299E1","#ED64A6"];function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,i)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach(function(e){s(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}var h="\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  ",c="\n    margin-top: 1.5rem;\n    text-transform: uppercase;\n    letter-spacing: 0.2em;\n    font-size: 0.75rem;\n  ";const d={general:({size:t,color:e})=>`\n    <svg\n        role="img"\n        xmlns="http://www.w3.org/2000/svg"\n        width="${t[0]}"\n        height="${t[1]}"\n        viewBox="0 0 24 24"\n        aria-labelledby="refreshIconTitle"\n        stroke="${e}"\n        stroke-width="1"\n        stroke-linecap="square"\n        stroke-linejoin="miter"\n        fill="none"\n        color="${e}"\n    >\n        <title id="refreshIconTitle">Refresh</title>\n        <polyline points="22 12 19 15 16 12"/>\n        <path d="M11,20 C6.581722,20 3,16.418278 3,12 C3,7.581722 6.581722,4 11,4 C15.418278,4 19,7.581722 19,12 L19,14"/>\n    </svg>\n`},u=(t,e)=>`\n    <div style="${h}">\n    <div class="chartisan-refresh-chart" style="\n    cursor: pointer;\n  ">\n        ${d[t.type](t)}\n    </div>\n    ${""!=t.text?`\n            <div style="color: ${t.textColor}; ${c}">\n                ${t.text}\n            </div>\n            `:""}\n    ${t.debug?`\n            <div style="\n    margin-top: 1.5rem;\n    text-transform: uppercase;\n    letter-spacing: 0.2em;\n    font-size: 0.6rem;\n    color: #f56565;\n  ">\n                ${e.message}\n            </div>`:""}\n    </div>\n`,p={bar:({size:t,color:e})=>`\n    <svg width="${t[0]}" height="${t[1]}" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg" fill="${e}">\n        <rect y="10" width="15" height="120" rx="6">\n            <animate attributeName="height"\n                begin="0.5s" dur="1s"\n                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                repeatCount="indefinite" />\n            <animate attributeName="y"\n                begin="0.5s" dur="1s"\n                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                repeatCount="indefinite" />\n        </rect>\n        <rect x="30" y="10" width="15" height="120" rx="6">\n            <animate attributeName="height"\n                begin="0.25s" dur="1s"\n                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                repeatCount="indefinite" />\n            <animate attributeName="y"\n                begin="0.25s" dur="1s"\n                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                repeatCount="indefinite" />\n        </rect>\n        <rect x="60" width="15" height="140" rx="6">\n            <animate attributeName="height"\n                begin="0s" dur="1s"\n                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                repeatCount="indefinite" />\n            <animate attributeName="y"\n                begin="0s" dur="1s"\n                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                repeatCount="indefinite" />\n        </rect>\n        <rect x="90" y="10" width="15" height="120" rx="6">\n            <animate attributeName="height"\n                begin="0.25s" dur="1s"\n                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                repeatCount="indefinite" />\n            <animate attributeName="y"\n                begin="0.25s" dur="1s"\n                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                repeatCount="indefinite" />\n        </rect>\n        <rect x="120" y="10" width="15" height="120" rx="6">\n            <animate attributeName="height"\n                begin="0.5s" dur="1s"\n                values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear"\n                repeatCount="indefinite" />\n            <animate attributeName="y"\n                begin="0.5s" dur="1s"\n                values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear"\n                repeatCount="indefinite" />\n        </rect>\n    </svg>\n`},g=t=>`\n    <div style="${h}">\n        ${p[t.type](t)}\n        ${""!=t.text?`\n                <div style="color: ${t.textColor}; ${c}">\n                    ${t.text}\n                </div>`:""}\n    </div>\n`;var m;!function(t){t.Initializing="initializing",t.Loading="loading",t.Error="error",t.Show="show",t.Destroyed="destroyed"}(m||(m={}));class f{constructor(t){this.options={el:".chartisan",url:void 0,options:void 0,data:void 0,loader:{type:"bar",size:[35,35],color:"#000",text:"Loading chart",textColor:"#a0aec0"},error:{type:"general",size:[50,50],color:"#f56565",text:"There was an error",textColor:"#a0aec0",debug:!0},hooks:void 0},this.cstate=m.Initializing;const{el:e}=this.options=l(l({},this.options),t);if("string"==typeof e){const t=document.querySelector(e);if(!t)throw Error(`[Chartisan] Unable to find an element to bind the chart to a DOM element with the selector: '${e}'`);this.element=t}else this.element=e;if(this.element.querySelector(".chartisan-controller"))throw Error(`[Chartisan] There seems to be a chart already at the element selected by: '${e}'`);this.controller=document.createElement("div"),this.body=document.createElement("div"),this.modal=document.createElement("div"),this.bootstrap()}setModal({show:t=!0,color:e="#FFFFFF",content:n}){this.modal.style.backgroundColor=e,this.modal.style.display=t?"flex":"none",n&&(this.modal.innerHTML=n)}changeTo(t,e){switch(t){case m.Loading:this.setModal({show:!0,content:g(this.options.loader)});break;case m.Show:this.setModal({show:!1});break;case m.Error:this.setModal({show:!0,content:u(this.options.error,null!=e?e:new Error("Unknown Error"))}),this.refreshEvent()}this.cstate=t}bootstrap(){this.element.appendChild(this.controller),this.controller.appendChild(this.body),this.controller.appendChild(this.modal),this.controller.setAttribute("style","\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  "),this.body.setAttribute("style","\n    position: relative;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  "),this.modal.setAttribute("style","\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n  "),this.update(this.options)}request(t){if(!this.options.url)return this.onError(new Error("No URL provided to fetch the data."));fetch(this.options.url,this.options.options).then(t=>t.json()).then(e=>this.onRawUpdate(e,t)).catch(t=>this.onError(t))}refreshEvent(){this.controller.getElementsByClassName("chartisan-refresh-chart")[0].addEventListener("click",()=>this.update(),{once:!0})}update(t){if((null==t?void 0:t.url)&&(this.options.url=t.url),(null==t?void 0:t.options)&&(this.options.options=t.options),null==t?void 0:t.data){let e;i(t.data)?e=t.data:((null==t?void 0:t.background)||this.changeTo(m.Loading),e=t.data());const n=this.getDataFrom(e);return this.changeTo(m.Show),t.background?this.onBackgroundUpdate(n,null==t?void 0:t.additional):this.onUpdate(n,null==t?void 0:t.additional)}(null==t?void 0:t.background)||this.changeTo(m.Loading),this.request(t)}destroy(){this.onDestroy(),this.controller.remove(),this.changeTo(m.Destroyed)}getDataFrom(e){let n=this.formatData(e);if(this.options.hooks)for(const i of this.options.hooks.hooks)n=i({data:n,merge:t,server:e});return n}onRawUpdate(t,e){if(!i(t))return this.onError(new Error("Invalid server data"));const n=this.getDataFrom(t);this.changeTo(m.Show),(null==e?void 0:e.background)?this.onBackgroundUpdate(n,null==e?void 0:e.additional):this.onUpdate(n,null==e?void 0:e.additional)}onError(t){this.changeTo(m.Error,t)}state(){return this.cstate}}export{m as ChartState,f as Chartisan,r as Hooks,o as colorPalette,u as error,e as isChartData,n as isDatasetData,i as isServerData,g as loader};
//# sourceMappingURL=chartisan.modern.js.map
